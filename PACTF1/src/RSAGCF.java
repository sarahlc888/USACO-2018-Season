//https://introcs.cs.princeton.edu/java/23recursion/Euclid.java.html
	/******************************************************************************
	 *  Compilation:  javac Euclid.java
	 *  Execution:    java Euclid p q
	 *  
	 *  Reads two command-line arguments p and q and computes the greatest
	 *  common divisor of p and q using Euclid's algorithm.
	 *
	 *  Remarks
	 *  -----------
	 *    - may return the negative of the gcd if p is negative
	 *
	 ******************************************************************************/
import java.math.*;

public class RSAGCF {
	static BigInteger zero = new BigInteger("0");

	// recursive implementation
	public static BigInteger gcd(BigInteger p, BigInteger q) {
		if (q.equals(zero)) return p;
		else return gcd(q, p.mod(q));
	}

	// non-recursive implementation
	public static BigInteger gcd2(BigInteger p, BigInteger q) {
		while (!q.equals(zero)) {
			BigInteger temp = q;
			q = p.mod(q);
			p = temp;
		}
		return p;
	}

	public static void main(String[] args) {
		BigInteger p = new BigInteger("769613389090007265513084959971310855856678126825464389531277198169566058123709184503427776405743135382601204415533466799224097798880440138745374487570198133090065755170685491454216212601175032432341344751407791848351820959924756515795945816095264631646002292986729588898994903064203092247699373615644120855892408548851862889874665721013694966710832236762305655329793594439947243828018219398762228125895067810157793269610737046690038191515545686059229493437872058892083231730358511900061980281082004365985834219076823425764901552771461982487799016247162874450692820223425880980013714807080119392326246561570415828430929850599826517045220114933205507359204433724560338743538652191481391854172994085031958321245741642392242195374895047351459509912636231743908455800078108930336673464517957215729669803447658337955438680604677145952999050499254507127700144214863763732629528664322899872900906084363171713079046864212022158957005009820203375223255531220906786570212188900300616113410640875718837563782495458123602562516111032108706004042382672490002421431963280184613433398275296161824333604074896571510026720849321968428893640758444046892509376408683722681072852953828000055088631383124074874489215865831000453743101145102801202114056591");
		BigInteger q = new BigInteger("719996231591210581801533436242603406306062792464955882159482165402403147349132161197421946669886073159581864362057733284077799171301603931507804359837962178445755243020015202969315046983081317769233682917279244790565323830391467108363701443187606440790528607951785994080727743744993788158545302189674737224784844419618015038037890638517548405970250958292243809221894945822946366118922577850216494376853060473441701978952136287360889670244338945097513057653409390895536850086163817427331479465260225851313362706407223925969429703321440415042010163089641783239780091604750978501788005838557673514809386416336066693354785585793130955349652113862360599605076924283405972169143340171927961157884771135368202667301180798044660927554026223601929488257438572717942531293168534331407276139915642191155157725810224983885002446217184821199814961143934668555903314764494395778778606184326778404362184873058134030812719667449246418677210019406888312078491653105834332366433894621963074571140699442845030906580361066323364034507490286290784626863583932882328149294212449180566734144312050124963865742816459384125249029515097601271368208046448658120018980170876260741644495811385545661310875012066485255660438576159122053256656224652739653995857211");
		BigInteger d  = gcd(p, q);
		BigInteger d2 = gcd2(p, q);
		//System.out.println("gcd(" + p + ", " + q + ") = " + d);
		//System.out.println("gcd(" + p + ", " + q + ") = " + d2);
		System.out.println("gcd() = " + d);
		System.out.println("gcd() = " + d2);
		
		
		
	}
}